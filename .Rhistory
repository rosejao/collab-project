geo = g
)
return(plot)
}
p <- food_year("adf", "asdf", "asdf")
food_year("adf", "asdf", "asdf")
food_year <- function(year_choice, item_choice, country_choice) {
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise("total" = sum(data[[year_choice]]))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot <- plot_geo(food_data) %>%
add_trace(z = ~total, color = ~total, colors = 'Reds', text = ~Area.Abbreviation,
locations = ~Area.Abbreviation, marker = list(line = l)) %>%
colorbar(title = 'Food levels in thousands') %>%
layout(
title = 'Food data by Country',
geo = g
)
return(plot)
}
food_year("adf", "asdf", "asdf")
food_year("Y1999", "asdf", "asdf")
food_year <- function(year_choice, item_choice, country_choice) {
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise("total" = sum(data[year_choice]))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot <- plot_geo(food_data) %>%
add_trace(z = ~total, color = ~total, colors = 'Reds', text = ~Area.Abbreviation,
locations = ~Area.Abbreviation, marker = list(line = l)) %>%
colorbar(title = 'Food levels in thousands') %>%
layout(
title = 'Food data by Country',
geo = g
)
return(plot)
}
food_year("Y1999", "asdf", "asdf")
food_year(Y1999, "asdf", "asdf")
food_year <- function(year_choice, item_choice, country_choice) {
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise("total" = sum(!!year_choice))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot <- plot_geo(food_data) %>%
add_trace(z = ~total, color = ~total, colors = 'Reds', text = ~Area.Abbreviation,
locations = ~Area.Abbreviation, marker = list(line = l)) %>%
colorbar(title = 'Food levels in thousands') %>%
layout(
title = 'Food data by Country',
geo = g
)
return(plot)
}
food_year("Y1999", "asdf", "asdf")
food_year("Y1999", "asdf", "asdf")
library(dplyr)
library(plotly)
library(ggplot2)
data <- read.csv("data/FAO.csv")
years <- list("Y1961" = 'Y1961', "Y1962" = 'Y1962')
countries <- data %>%
distinct(Area)
countries <- head(countries, n = 10)
items <- data %>%
distinct(Item)
food_year <- function(year_choice, item_choice, country_choice) {
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise("total" = sum(data[[year_choice]]))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot <- plot_geo(food_data) %>%
add_trace(z = ~total, color = ~total, colors = 'Reds', text = ~Area.Abbreviation,
locations = ~Area.Abbreviation, marker = list(line = l)) %>%
colorbar(title = 'Food levels in thousands') %>%
layout(
title = 'Food data by Country',
geo = g
)
return(plot)
}
food_year("Y1999", "asdf", "asdf")
library(dplyr)
library(plotly)
library(ggplot2)
data <- read.csv("data/FAO.csv")
years <- list("Y1961" = 'Y1961', "Y1962" = 'Y1962')
countries <- data %>%
distinct(Area)
countries <- head(countries, n = 10)
items <- data %>%
distinct(Item)
food_year <- function(year_choice, item_choice, country_choice) {
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise("total" = sum([[year_choice]]))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot <- plot_geo(food_data) %>%
add_trace(z = ~total, color = ~total, colors = 'Reds', text = ~Area.Abbreviation,
locations = ~Area.Abbreviation, marker = list(line = l)) %>%
colorbar(title = 'Food levels in thousands') %>%
layout(
title = 'Food data by Country',
geo = g
)
return(plot)
}
food_year("Y1999", "asdf", "asdf")
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food")
View(food_data)
library(dplyr)
library(plotly)
library(ggplot2)
data <- read.csv("data/FAO.csv")
years <- list("Y1961" = 'Y1961', "Y1962" = 'Y1962')
countries <- data %>%
distinct(Area)
countries <- head(countries, n = 10)
items <- data %>%
distinct(Item)
food_year <- function(year_choice, item_choice, country_choice) {
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise("total" = sum(data[["Y1999"]]))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot <- plot_geo(food_data) %>%
add_trace(z = ~total, color = ~total, colors = 'Reds', text = ~Area.Abbreviation,
locations = ~Area.Abbreviation, marker = list(line = l)) %>%
colorbar(title = 'Food levels in thousands') %>%
layout(
title = 'Food data by Country',
geo = g
)
return(plot)
}
food_year("Y1999", "asdf", "asdf")
library(dplyr)
library(plotly)
library(ggplot2)
data <- read.csv("data/FAO.csv")
years <- list("Y1961" = 'Y1961', "Y1962" = 'Y1962')
countries <- data %>%
distinct(Area)
countries <- head(countries, n = 10)
items <- data %>%
distinct(Item)
food_year <- function(year_choice, item_choice, country_choice) {
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise("total" = sum("Y1999"))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot <- plot_geo(food_data) %>%
add_trace(z = ~total, color = ~total, colors = 'Reds', text = ~Area.Abbreviation,
locations = ~Area.Abbreviation, marker = list(line = l)) %>%
colorbar(title = 'Food levels in thousands') %>%
layout(
title = 'Food data by Country',
geo = g
)
return(plot)
}
food_year("Y1999", "asdf", "asdf")
library(dplyr)
library(plotly)
library(ggplot2)
data <- read.csv("data/FAO.csv")
years <- list("Y1961" = 'Y1961', "Y1962" = 'Y1962')
countries <- data %>%
distinct(Area)
countries <- head(countries, n = 10)
items <- data %>%
distinct(Item)
food_year <- function(year_choice, item_choice, country_choice) {
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise("total" = sum(!!"Y1999"))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot <- plot_geo(food_data) %>%
add_trace(z = ~total, color = ~total, colors = 'Reds', text = ~Area.Abbreviation,
locations = ~Area.Abbreviation, marker = list(line = l)) %>%
colorbar(title = 'Food levels in thousands') %>%
layout(
title = 'Food data by Country',
geo = g
)
return(plot)
}
food_year("Y1999", "asdf", "asdf")
library(dplyr)
library(plotly)
library(ggplot2)
data <- read.csv("data/FAO.csv")
years <- list("Y1961" = 'Y1961', "Y1962" = 'Y1962')
countries <- data %>%
distinct(Area)
countries <- head(countries, n = 10)
items <- data %>%
distinct(Item)
food_year <- function(year_choice, item_choice, country_choice) {
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise("total" = sum(!!"Y1999"))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot <- plot_geo(food_data) %>%
add_trace(z = ~total, color = ~total, colors = 'Reds', text = ~Area.Abbreviation,
locations = ~Area.Abbreviation, marker = list(line = l)) %>%
colorbar(title = 'Food levels in thousands') %>%
layout(
title = 'Food data by Country',
geo = g
)
return(plot)
}
food_year("Y1999", "asdf", "asdf")
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise(sum(Y1999))
View(food_data)
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise(sum(Y1961), sum(Y1962))
food_year("sum(Y1961)", "asdf", "asdf")
food_year('sum(Y1961)', "asdf", "asdf")
library(dplyr)
library(plotly)
library(ggplot2)
data <- read.csv("data/FAO.csv")
years <- list("Y1961" = 'Y1961', "Y1962" = 'Y1962')
countries <- data %>%
distinct(Area)
countries <- head(countries, n = 10)
items <- data %>%
distinct(Item)
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise(sum(Y1961), sum(Y1962))
food_year <- function(year_choice, item_choice, country_choice) {
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot <- plot_geo(food_data) %>%
add_trace(z = food_data[[year_choice]], color = food_data[[year_choice]],
colors = 'Reds', text = ~Area.Abbreviation,
locations = ~Area.Abbreviation, marker = list(line = l)) %>%
colorbar(title = 'Food levels in thousands') %>%
layout(
title = 'Food data by Country',
geo = g
)
return(plot)
}
food_year('sum(Y1961)', "asdf", "asdf")
food_year('sum(Y1962)', "asdf", "asdf")
food_year('sum(Y1962)', "asdf", "asdf")
runApp()
View(food_data)
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise(sum(c(Y1961, Y1962)))
View(food_data)
runApp()
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise(sum(data[['Y1962']]))
View(food_data)
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise(sum(data[[Y1962]]))
View(food_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Item == item_choice) %>%
summarise(sum(Y1961), sum(Y2013))
View(food_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(plotly)
library(ggplot2)
data <- read.csv("data/FAO.csv")
years <- list("Y1961" = 'sum(Y1961)', "Y2013" = 'sum(Y2013)')
countries <- data %>%
distinct(Area)
countries <- head(countries, n = 10)
items <- data %>%
distinct(Item)
food_year <- function(year_choice, item_choice = "Sugar cane", country_choice) {
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise(sum(Y1961), sum(Y1962), sum(Y2013))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot <- plot_geo(food_data) %>%
add_trace(z = food_data[[year_choice]], color = food_data[[year_choice]],
colors = 'Reds', text = ~Area.Abbreviation,
locations = ~Area.Abbreviation, marker = list(line = l)) %>%
colorbar(title = 'Food levels in thousands') %>%
layout(
title = 'Food data by Country',
geo = g
)
return(plot)
}
food_year('sum(Y1962)', "asdf", "asdf")
library(dplyr)
library(plotly)
library(ggplot2)
data <- read.csv("data/FAO.csv")
years <- list("Y1961" = 'sum(Y1961)', "Y2013" = 'sum(Y2013)')
countries <- data %>%
distinct(Area)
countries <- head(countries, n = 10)
items <- data %>%
distinct(Item)
food_year <- function(year_choice, item_choice = "Sugar cane", country_choice) {
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise(sum(Y1961), sum(Y1962), sum(Y2013))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot <- plot_geo(food_data) %>%
add_trace(z = food_data[[year_choice]], color = food_data[[year_choice]],
colors = 'Reds', text = ~Area.Abbreviation,
locations = ~Area.Abbreviation, marker = list(line = l)) %>%
colorbar(title = 'Food levels in thousands') %>%
layout(
title = 'Food data by Country',
geo = g
)
return(plot)
}
food_year('sum(Y1988)', "asdf", "asdf")
runApp()
runApp()
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise(sum(Y1961), sum(Y1962), sum(Y2013))
View(food_data)
runApp()
elements <- data %>%
distinct(Element)
View(elements)
runApp()
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == element_choice) %>%
summarise(sum(Y1961:Y2013), sum(Y1962), sum(Y2013))
library(dplyr)
library(plotly)
library(ggplot2)
data <- read.csv("data/FAO.csv")
countries <- data %>%
distinct(Area)
countries <- head(countries, n = 10)
items <- data %>%
distinct(Item)
elements <- data %>%
distinct(Element)
food_year <- function(year_choice, element_choice = "Food", country_choice) {
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == element_choice) %>%
summarise(sum(Y1961:Y2013), sum(Y1962), sum(Y2013))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot <- plot_geo(food_data) %>%
add_trace(z = food_data[[year_choice]], color = food_data[[year_choice]],
colors = 'Reds', text = ~Area.Abbreviation,
locations = ~Area.Abbreviation, marker = list(line = l)) %>%
colorbar(title = 'Food levels in thousands') %>%
layout(
title = 'Food data by Country',
geo = g
)
return(plot)
}
food_year('sum(Y1988)', "asdf", "asdf")
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == element_choice) %>%
summarise(sum(Y1961:Y2013), sum(Y1962), sum(Y2013))
View(food_data)
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == element_choice) %>%
summarise(sum(Y1961::Y2013), sum(Y1962), sum(Y2013))
food_data <- group_by(data, Area.Abbreviation) %>%
filter(Element == "Food") %>%
summarise(sum(Y1961::Y2013), sum(Y1962), sum(Y2013))
runApp()
runApp()
shiny::runApp('~/Desktop/Naman Mehra/Files/201')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
