my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 200
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost = puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- FALSE
if(total_cost > 1000) {
too_expenseive <- TRUE
}
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
print(max_puppies)
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "New Delhi"
# Assign your name to the variable `my_name`
my_name <- "Naman Mehra"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 200
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost = puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- FALSE
if(total_cost > 1000) {
too_expenseive <- TRUE
}
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
print(too_expensive)
if(total_cost > 10) {
too_expenseive <- TRUE
}
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "New Delhi"
# Assign your name to the variable `my_name`
my_name <- "Naman Mehra"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 200
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost = puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- FALSE
if(total_cost > 10) {
too_expenseive <- TRUE
}
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
print(too_expensive)
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost = puppies * puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "New Delhi"
# Assign your name to the variable `my_name`
my_name <- "Naman Mehra"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 200
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost = puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- FALSE
if(total_cost > 10) {
too_expenseive <- TRUE
}
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
print(total_cost)
print(too_expenseive)
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 21
# Create a variable `my_name` that is equal to your first name
my_name <- "Naman"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 24 * 60
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 365.25 * 24
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
return(paste0("Hello, my name is ", name, ", and I'm ", age, " years old."))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- str_replace(my_intro, "Hello, my name is ", "Hey, I'm ")
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
value * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
value ^ 3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c(
"Dark Knight", "Inception", "Interstellar", "City of God",
"Pulp Fiction", "Arrival"
)
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[-4]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- seq(500, 699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date("2018-06-08")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- today - summer_break
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthdate) {
days_till_bday <- as.Date(birthdate) - today
new_age <- age + 1
paste(make_introduction(name, age), "In", days_till_bday,
"days I'll be", new_age)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-09-26")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector) {
gsub("\\d", "", vector)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test_remove_digits <- remove_digits(c("INFO 201", "CSE 142"))
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 21
# Create a variable `my_name` that is equal to your first name
my_name <- "Naman"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 24 * 60
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 365.25 * 24
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
return(paste0("Hello, my name is ", name, ", and I'm ", age, " years old."))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- str_replace(my_intro, "Hello, my name is ", "Hey, I'm ")
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
value * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
value ^ 3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c(
"Dark Knight", "Inception", "Interstellar", "City of God",
"Pulp Fiction", "Arrival"
)
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[-4]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- seq(500, 699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date("2018-06-08")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- today - summer_break
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthdate) {
days_till_bday <- as.Date(birthdate) - today
new_age <- age + 1
paste(make_introduction(name, age), "In", days_till_bday,
"days I'll be", new_age)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-09-26")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector) {
gsub("\\d", "", vector)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test_remove_digits <- remove_digits(c("INFO 201", "CSE 142"))
install.packages("stringr")
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 21
# Create a variable `my_name` that is equal to your first name
my_name <- "Naman"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 24 * 60
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 365.25 * 24
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
return(paste0("Hello, my name is ", name, ", and I'm ", age, " years old."))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- str_replace(my_intro, "Hello, my name is ", "Hey, I'm ")
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
value * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
value ^ 3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c(
"Dark Knight", "Inception", "Interstellar", "City of God",
"Pulp Fiction", "Arrival"
)
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[-4]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- seq(500, 699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date("2018-06-08")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- today - summer_break
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthdate) {
days_till_bday <- as.Date(birthdate) - today
new_age <- age + 1
paste(make_introduction(name, age), "In", days_till_bday,
"days I'll be", new_age)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-09-26")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector) {
gsub("\\d", "", vector)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test_remove_digits <- remove_digits(c("INFO 201", "CSE 142"))
today
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
View(flights)
cols <- ncol(flights)
rows <- nrow(flights)
install.packages("dplyr")
library("dplyr")
air_time_arr <- arrange(flights, air_time)
View(air_time_arr)
View(air_time_arr)
air_time_arr <- arrange(flights, -air_time)
hist(flights)
hist(flights, x=air_time)
hist(flights, x=flights$air_time)
sea <- select(flights, origin, destination) %>%
filter(destination = "SEA")
sea <- select(flights, origin, dest) %>%
filter(destination = "SEA")
sea <- select(flights, origin, dest) %>%
filter(destination == "SEA")
sea <- select(flights, origin, dest) %>%
filter(dest == "SEA")
View(sea)
View(sea)
flights <- flights %>%
mutate(time_gained = arr_delay - dep_delay)
View(flights)
View(flights)
# created. Remember to save this as a variable (or in the same one!)
flights <- flights %>%
arrange(-time_gained)
hist(x = flights$time_gained)
avg_time <- mean(flights$time_gained, na.rm = TRUE)
avg_time <- if mean(flights$time_gained, na.rm = TRUE) < 0 "Gainged" else "Lost"
avg_time <- if mean(x = flights$time_gained, na.rm = TRUE) < 0 "Gainged" else "Lost"
avg_time <- mean(x = flights$time_gained, na.rm = TRUE) < 0
summarise(sea, mean = mean(time_gained, na.rm = T))
data <- read.csv("deaths.1x1")
data <- read.csv("data/FAO.csv")
setwd("~/Desktop/Naman Mehra/Files/201/collab-project")
data <- read.csv("data/FAO.csv")
View(data)
View(data)
shiny::runApp('~/Desktop/Naman Mehra/Files/201/a8-shiny-namanzam')
runApp('~/Desktop/Naman Mehra/Files/201/a8-shiny-namanzam')
data <- read.csv("data/FAO.csv")
View(data)
View(data)
